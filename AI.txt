1.Assignment Based on direct heuristic search techniques.

from collections import defaultdict as dd
class Graph:
# Constructing a list
def __init__(self):
# default dictionary to store graph
self.graph = dd(list)
# defining function which will add edge to the graph
def addEdgetoGraph(self, x, y):
self.graph[x].append(y)
# defining function to print BFS traverse
def BFSearch(self, n):
# Initially marking all vertices as not visited


visited_vertices = ( len(self.graph ))*[False]
# creating a queue for visited vertices
queue = []
# setting source node as visited and adding it to the queue
visited_vertices[n] = True
queue.append(n)
while queue:
# popping the element from the queue which is printed
n = queue.pop(0)
print (n, end = " ")
# getting vertices adjacent to the vertex n which is dequed. 37. for v in self.graph[ n ]:
if visited_vertices[v] == False:
queue.append(v)
visited_vertices[v] = True
# Example code
# Initializing a graph
graph = Graph()
graph.addEdgetoGraph(0, 1)
graph.addEdgetoGraph(1, 1)
graph.addEdgetoGraph(2, 2)
graph.addEdgetoGraph(3, 1)
graph.addEdgetoGraph(4, 3)
 graph.addEdgetoGraph(5, 4)
print ( " The Breadth First Search Traversal for The Graph is as Follows: " )
graph.BFSearch(3)

2.Implement an expert system in Python 

class RuleBasedExpertSystem:
    def _init_(self):
        # Define the rules as a list of tuples (condition, diagnosis)
        self.rules = [
            (lambda symptoms: 'fever' in symptoms and 'cough' in symptoms, 'Flu'),
            (lambda symptoms: 'fever' in symptoms and 'rash' in symptoms, 'Measles'),
            (lambda symptoms: 'headache' in symptoms and 'nausea' in symptoms, 'Migraine'),
        ]

    def evaluate_rules(self, symptoms):
        for condition, diagnosis in self.rules:
            if condition(symptoms):
                return diagnosis
        return 'No diagnosis found'

def main():
    # Create an instance of the expert system
    expert_system = RuleBasedExpertSystem()
    
    # Collect symptoms from the user
    symptoms = input("Enter your symptoms separated by commas (e.g., fever,cough): ").split(',')
    symptoms = [s.strip() for s in symptoms]  # Clean up the input
    
    # Evaluate the symptoms and provide a diagnosis
    diagnosis = expert_system.evaluate_rules(symptoms)
    print(f"Diagnosis: {diagnosis}")

if _name_ == "_main_":
    main()


3.Implement any two player game using min-max search algorithm

import math

# Initial board configuration
board = [[' ' for _ in range(3)] for _ in range(3)]

# Function to print the board
def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

# Function to check if there's a winner
def check_winner(board):
    for row in board:
        if row[0] == row[1] == row[2] != ' ':
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != ' ':
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return board[0][2]
    return None

# Function to check if the board is full
def is_full(board):
    return all(cell != ' ' for row in board for cell in row)

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == 'X':
        return -1
    elif winner == 'O':
        return 1
    elif is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    best_score = min(score, best_score)
        return best_score

# Function to make the best move
def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                score = minimax(board, 0, False)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Main game loop
def play_game():
    player_turn = True
    while True:
        print_board(board)
        if check_winner(board) or is_full(board):
            break

        if player_turn:
            row, col = map(int, input("Enter your move (row and column): ").split())
            if board[row][col] == ' ':
                board[row][col] = 'X'
                player_turn = False
            else:
                print("Invalid move. Try again.")
        else:
            move = best_move(board)
            if move:
                board[move[0]][move[1]] = 'O'
                player_turn = True

    winner = check_winner(board)
    if winner:
        print(f"{winner} wins!")
    else:
        print("It's a tie!")

# Start the game
play_game()

4.A* Algorithm using Python.

from heapq import heappop, heappush

def a_star_search(graph, start, goal, heuristic):
    open_list = []
    heappush(open_list, (0, start))
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph}
    f_score[start] = heuristic[start]

    while open_list:
        current = heappop(open_list)[1]

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]

        for neighbor, cost in graph[current]:
            tentative_g_score = g_score[current] + cost
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic[neighbor]
                heappush(open_list, (f_score[neighbor], neighbor))

    return None

# Example usage:
graph = {
    'A': [('B', 1), ('C', 3)],
    'B': [('D', 1)],
    'C': [('D', 1)],
    'D': []
}
heuristic = {
    'A': 3,
    'B': 1,
    'C': 1,
    'D': 0
}
start = 'A'
goal = 'D'
path = a_star_search(graph, start, goal, heuristic)
print("Path found:", path)

5.Implement perceptron learning algorithm
# Import the necessary library
import numpy as np

# Build the Perceptron Model
class Perceptron:
    
    def __init__(self, num_inputs, learning_rate=0.01):
        # Initialize the weight and learning rate
        self.weights = np.random.rand(num_inputs + 1)
        self.learning_rate = learning_rate
    
    # Define the first linear layer 
    def linear(self, inputs):
        Z = inputs @ self.weights[1:].T + + self.weights[0]
        return Z
    
    # Define the Heaviside Step function.
    def Heaviside_step_fn(self, z):
        if z>=0:
            return 1
        else:
            return 0
        
    # Define the Prediction
    def predict(self, inputs):
        Z = self.linear(inputs)
        try:
            pred = []
            for z in Z:
                pred.append(self.Heaviside_step_fn(z))
        except:
            return self.Heaviside_step_fn(Z)
        return pred
    
    # Define the Loss function
    def loss(self, prediction, target):
        loss = (prediction-target)
        return loss
    
    #Define training
    def train(self, inputs, target):
        prediction = self.predict(inputs)
        error = self.loss(prediction, target)
        self.weights[1:] += self.learning_rate * error * inputs
        self.weights[0]  += self.learning_rate * error
        
    # Fit the model
    def fit(self, X, y, num_epochs):
        for epoch in range(num_epochs):
            for inputs, target in zip(X, y):
                self.train(inputs, target)

#input
Input 1 (Weight): 150 grams
Input 2 (Color): 0.9 (since the fruit is mostly red)
Weights: [0.5, 1.0]
Bias: 1.5

6.fuzzy logic set for shape matching of hand written characters in python
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Define the fuzzy variables
x = ctrl.Antecedent(np.arange(0, 11, 1), 'x')
y = ctrl.Antecedent(np.arange(0, 11, 1), 'y')
z = ctrl.Consequent(np.arange(0, 26, 1), 'z')

# Define the fuzzy membership functions
x['low'] = fuzz.trimf(x.universe, [0, 0, 5])
x['medium'] = fuzz.trimf(x.universe, [0, 5, 10])
x['high'] = fuzz.trimf(x.universe, [5, 10, 10])

y['low'] = fuzz.trimf(y.universe, [0, 0, 5])
y['medium'] = fuzz.trimf(y.universe, [0, 5, 10])
y['high'] = fuzz.trimf(y.universe, [5, 10, 10])

z['low'] = fuzz.trimf(z.universe, [0, 0, 13])
z['medium'] = fuzz.trimf(z.universe, [0, 13, 26])
z['high'] = fuzz.trimf(z.universe, [13, 26, 26])

# Define fuzzy rules
rule1 = ctrl.Rule(x['low'] & y['low'], z['low'])
rule2 = ctrl.Rule(x['medium'] & y['medium'], z['medium'])
rule3 = ctrl.Rule(x['high'] & y['high'], z['high'])

# Create the control system
char_matching_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
char_matching = ctrl.ControlSystemSimulation(char_matching_ctrl)

# Input values
char_matching.input['x'] = 4.5
char_matching.input['y'] = 6.5

# Compute the result
char_matching.compute()
print(char_matching.output['z'])

7.implement image processing using AI libraries in python code
import cv2
import numpy as np

# Load an image from file
image = cv2.imread('input_image.jpg')

# Convert the image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply edge detection using Canny algorithm
edges = cv2.Canny(gray_image, 100, 200)

# Save the processed images
cv2.imwrite('gray_image.jpg', gray_image)
cv2.imwrite('edges.jpg', edges)

# Display the images
cv2.imshow('Original Image', image)
cv2.imshow('Gray Image', gray_image)
cv2.imshow('Edges', edges)

cv2.waitKey(0)
cv2.destroyAllWindows()